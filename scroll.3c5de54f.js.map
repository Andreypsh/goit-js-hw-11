{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,S,0BAKMC,EAAW,CACfC,YAAaC,SAASC,cAAc,6BACpCC,WAAYF,SAASC,cAAc,gBACnCE,KAAMH,SAASC,cAAc,YAC7BG,MAAOJ,SAASC,cAAc,aAC9BI,GAAIL,SAASC,cAAc,QAI7BH,EAASO,GAAGC,UAAUC,QAAQ,KAAM,aACpC,IAAIC,EAAc,EAEdC,EAAQX,EAASC,YAAYW,MAM3BC,EAAW,IAAIC,sBA4BrB,SAAoBC,GAClBJ,EAAQX,EAASC,YAAYW,MAC7BG,EAAQC,SAAQ,SAAAC,GACVA,EAAMC,iBACRR,GAAe,GACf,EAAAS,EAAAC,aAAYT,EAAOD,EAxCX,IAwCiCW,MAAK,SAAAC,GAC5C,IAAIC,EAAaD,EAAKE,UAzChB,GA0CNxB,EAASK,KAAKoB,mBAAmB,YAAaC,EAAaJ,EAAKK,OACjD,IAAIC,EAAAC,GAAJ,CAAmB,cAClC7B,EAASO,GAAGuB,QAAU,WACpBC,OAAOC,SAAS,CACdC,IAAK,EACLC,SAAU,U,EAGVxB,GAAea,IACjBV,EAASsB,UAAUnC,EAASM,OAC5BR,EAAAsC,OAAOC,KACL,8DAGFrC,EAASO,GAAGC,UAAUC,QAAQ,YAAa,M,UArDrC,CACd6B,WAAY,UA2Dd,SAASZ,EAAaJ,GACpB,OAAOA,EACJiB,KACC,SAAAC,G,IACEC,EAAYD,EAAZC,aACAC,EAAaF,EAAbE,cACAC,EAAIH,EAAJG,KACAC,EAAKJ,EAALI,MACAC,EAAKL,EAALK,MACAC,EAAQN,EAARM,SACAC,EAASP,EAATO,U,MAEA,8FAE4EC,OAAhDN,EAAc,oCAAsDM,OAApBP,EAAa,SAG/EO,OAHsFL,EAAK,uGAM3FK,OAHAJ,EAAM,qEAMHI,OAHHH,EAAM,4EAMFG,OAHDF,EAAS,2EAGEE,OAAVD,EAAU,8C,IAK3BE,KAAK,G,CAGV,SAASC,IACPpD,EAAAsC,OAAOe,QACL,2E,CAlEJnD,EAASI,WAAWgD,iBAAiB,UAxBrC,SAAuBC,GACrBA,EAAIC,iBACJtD,EAASK,KAAKkD,UAAY,GAC1B7C,EAAc,EACdC,EAAQX,EAASC,YAAYW,OAC7B,EAAAO,EAAAC,aAAYT,EAAOD,EAdP,IAeTW,MAAK,SAAAC,GACJ,IAAIC,EAAaD,EAAKE,UAhBd,GAiBJF,EAAKK,KAAK6B,OAAS,EACrB1D,EAAAsC,OAAOqB,QAAQ,oBAAmCT,OAAf1B,EAAKE,UAAU,aAElDkC,SAAStB,OAAOe,QACd,4EAGJnD,EAASK,KAAKoB,mBAAmB,YAAaC,EAAaJ,EAAKK,OAChE,IAAIC,EAAAC,GAAJ,CAAmB,cACfnB,EAAca,GAChBV,EAAS8C,QAAQ3D,EAASM,M,IAG7BsD,MAAMV,E","sources":["src/js/scroll.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { fetchSearch } from './search-api';\nimport SimpleLightbox from 'simplelightbox';\nimport 'simplelightbox/dist/simple-lightbox.min.css';\n\nconst elements = {\n  searchQuery: document.querySelector('input[name=\"searchQuery\"]'),\n  searchForm: document.querySelector('.search-form'),\n  list: document.querySelector('.gallery'),\n  guard: document.querySelector('.js-guard'),\n  up: document.querySelector('.up'),\n};\n\n// const { height: cardHeight } = card.getBoundingClientRect();\nelements.up.classList.replace('up', 'up-hidden');\nlet currentPage = 0;\nlet perPage = 40;\nlet input = elements.searchQuery.value;\n\nconst options = {\n  rootMargin: '400px',\n};\n\nconst observer = new IntersectionObserver(onLoadMore, options);\n\nfunction hendlerSearch(evt) {\n  evt.preventDefault();\n  elements.list.innerHTML = '';\n  currentPage = 1;\n  input = elements.searchQuery.value;\n  fetchSearch(input, currentPage, perPage)\n    .then(data => {\n      let total_Page = data.totalHits / perPage;\n      if (data.hits.length > 0) {\n        Notify.success(`Hooray! We found ${data.totalHits} images.`);\n      } else {\n        Notiflix.Notify.failure(\n          'Sorry, there are no images matching your search query. Please try again.'\n        );\n      }\n      elements.list.insertAdjacentHTML('beforeend', createMarkup(data.hits));\n      new SimpleLightbox('.gallery a');\n      if (currentPage < total_Page) {\n        observer.observe(elements.guard);\n      }\n    })\n    .catch(onSubmitError);\n}\n\nelements.searchForm.addEventListener('submit', hendlerSearch);\n\nfunction onLoadMore(entries) {\n  input = elements.searchQuery.value;\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      currentPage += 1;\n      fetchSearch(input, currentPage, perPage).then(data => {\n        let total_Page = data.totalHits / perPage;\n        elements.list.insertAdjacentHTML('beforeend', createMarkup(data.hits));\n        var lightbox = new SimpleLightbox('.gallery a');\n        elements.up.onclick = () => {\n          window.scrollTo({\n            top: 0,\n            behavior: 'smooth',\n          });\n        };\n        if (currentPage >= total_Page) {\n          observer.unobserve(elements.guard);\n          Notify.info(\n            \"We're sorry, but you've reached the end of search results.\"\n          );\n\n          elements.up.classList.replace('up-hidden', 'up');\n        }\n      });\n    }\n  });\n}\n\nfunction createMarkup(data) {\n  return data\n    .map(\n      ({\n        webformatURL,\n        largeImageURL,\n        tags,\n        likes,\n        views,\n        comments,\n        downloads,\n      }) =>\n        `<li class=\"photo-card\">\n       <div class=\"img_block\">\n    <a class=\"gallery_link\" href =${largeImageURL}><img class=\"gallery_image\" src=${webformatURL} alt=${tags} loading=\"lazy\" /></a></div>\n    <ul class=\"info\">\n      <li class=\"info-item\">\n        Likes<p>${likes}</p>\n      </li>\n      <li class=\"info-item\">\n        Views<p>${views}</p>\n        </li>\n        <li class=\"info-item\">\n        Comments<p>${comments}</p>\n        </li>\n      <li class=\"info-item\">\n        Downloads<p>${downloads}</p>\n        </li>\n        </ul>\n  </li>`\n    )\n    .join('');\n}\n\nfunction onSubmitError() {\n  Notify.failure(\n    'Sorry, there are no images matching your search query. Please try again.'\n  );\n}\n"],"names":["$h6c0i","parcelRequire","$dd9e54e108f59881$var$elements","searchQuery","document","querySelector","searchForm","list","guard","up","classList","replace","$dd9e54e108f59881$var$currentPage","$dd9e54e108f59881$var$input","value","$dd9e54e108f59881$var$observer","IntersectionObserver","entries","forEach","entry","isIntersecting","$fxMCL","fetchSearch","then","data","total_Page","totalHits","insertAdjacentHTML","$dd9e54e108f59881$var$createMarkup","hits","$parcel$interopDefault","$5IjG7","onclick","window","scrollTo","top","behavior","unobserve","Notify","info","rootMargin","map","param","webformatURL","largeImageURL","tags","likes","views","comments","downloads","concat","join","$dd9e54e108f59881$var$onSubmitError","failure","addEventListener","evt","preventDefault","innerHTML","length","success","Notiflix","observe","catch"],"version":3,"file":"scroll.3c5de54f.js.map"}